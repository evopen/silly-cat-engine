#version 460
#extension GL_EXT_debug_printf : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_ray_query : require
#extension GL_EXT_shader_16bit_storage : require

layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, rgba32f) uniform image2D storage_image;

layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;

layout(binding = 2, set = 0, scalar) buffer Indices
{
    uint16_t indices[];
};
layout(binding = 3, set = 0, scalar) buffer Vertices
{
    vec3 vertices[];
};

const vec3 camera_origin = vec3(-0.001, 1.0, 6.0);

vec3 ACESToneMapping(vec3 color, float adapted_lum)
{
    const float A = 2.51f;
    const float B = 0.03f;
    const float C = 2.43f;
    const float D = 0.59f;
    const float E = 0.14f;

    color *= adapted_lum;
    return (color * (A * color + B)) / (color * (C * color + D) + E);
}

vec3 skyColor(vec3 direction)
{
    // +y in world space is up, so:
    if (direction.y > 0.0f) {
        return mix(vec3(1.0f), vec3(0.25f, 0.5f, 1.0f), direction.y);
    } else {
        return vec3(0.03f);
    }
}

struct HitInfo {
    vec3 color;
    vec3 world_normal;
    vec3 world_position;
};

HitInfo get_object_hit_info(rayQueryEXT ray_query)
{
    HitInfo result;

    // Get the ID of the triangle
    const int primitiveID = rayQueryGetIntersectionPrimitiveIndexEXT(ray_query, true);

    // Get the indices of the vertices of the triangle
    const uint i0 = uint(indices[3 * primitiveID + 0]);
    const uint i1 = uint(indices[3 * primitiveID + 1]);
    const uint i2 = uint(indices[3 * primitiveID + 2]);

    // Get the vertices of the triangle
    const vec3 v0 = vertices[i0];
    const vec3 v1 = vertices[i1];
    const vec3 v2 = vertices[i2];

    // Get the barycentric coordinates of the intersection
    vec3 barycentrics = vec3(0.0, rayQueryGetIntersectionBarycentricsEXT(ray_query, true));
    barycentrics.x = 1.0 - barycentrics.y - barycentrics.z;

    vec3 object_position = v0 * barycentrics.x + v1 * barycentrics.y + v2 * barycentrics.z;
    result.world_position = rayQueryGetIntersectionObjectToWorldEXT(ray_query, true) * vec4(object_position, 1.f);
    vec3 object_normal = normalize(cross(v1 - v0, v2 - v0));
    result.world_normal = normalize((object_normal * rayQueryGetIntersectionObjectToWorldEXT(ray_query, true)).xyz);

    const float dotX = dot(result.world_normal, vec3(1.0, 0.0, 0.0));
    if (dotX > 0.99) {
        result.color = vec3(0.8, 0.2, 0.2);
    } else if (dotX < -0.99) {
        result.color = vec3(0.2, 0.8, 0.2);
    } else {
        result.color = vec3(0.8);
    }

    return result;
}

// Random number generation using pcg32i_random_t, using inc = 1. Our random state is a uint.
uint stepRNG(uint rng_state)
{
    return rng_state * 747796405 + 1;
}

// Steps the RNG and returns a floating-point value between 0 and 1 inclusive.
float stepAndOutputRNGFloat(inout uint rng_state)
{
    // Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].
    rng_state = stepRNG(rng_state);
    uint word = ((rng_state >> ((rng_state >> 28) + 4)) ^ rng_state) * 277803737;
    word = (word >> 22) ^ word;
    return float(word) / 4294967295.0f;
}

void main()
{
    uvec2 resolution = uvec2(imageSize(storage_image));
    const uvec2 pixel = gl_GlobalInvocationID.xy;
    if ((pixel.x > resolution.x) || (pixel.y > resolution.y)) {
        return;
    }

    const vec2 screenUV = vec2(2.0 * (float(pixel.x) + 0.5 - 0.5 * resolution.x) / resolution.y, //
        -(2.0 * (float(pixel.y) + 0.5 - 0.5 * resolution.y) / resolution.y) // Flip the y axis
    );

    const float fovVerticalSlope = 1.0 / 5.0;

    vec3 pixel_color = vec3(0.0, 0, 0);

    uint rng_state = resolution.x * pixel.y + pixel.x;

    const uint SAMPLE_COUNT = 128;

    vec3 summed_pixel_color = vec3(0);

    for (uint sample_id = 0; sample_id < SAMPLE_COUNT; sample_id++) {

        vec2 random_pixel = pixel + vec2(stepAndOutputRNGFloat(rng_state), stepAndOutputRNGFloat(rng_state));
        const vec2 screenUV = vec2(2.0 * (float(random_pixel.x) + 0.5 - 0.5 * resolution.x) / resolution.y, //
            -(2.0 * (float(random_pixel.y) + 0.5 - 0.5 * resolution.y) / resolution.y) // Flip the y axis
        );
        vec3 accumulated_ray_color = vec3(1.0);
        vec3 ray_origin = camera_origin;
        vec3 ray_direction = normalize(vec3(fovVerticalSlope * screenUV.x, fovVerticalSlope * screenUV.y, -1.0));

        for (int traced_segments = 0; traced_segments < 32; traced_segments++) {
            rayQueryEXT rayQuery;

            rayQueryInitializeEXT(rayQuery, // Ray query
                tlas, // Top-level acceleration structure
                gl_RayFlagsOpaqueEXT, // Ray flags, here saying "treat all geometry as opaque"
                0xFF, // 8-bit instance mask, here saying "trace against all instances"
                ray_origin, // Ray origin
                0.0001, // Minimum t-value
                ray_direction, // Ray direction
                10000.0); // Maximum t-value

            while (rayQueryProceedEXT(rayQuery)) {
            }

            if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT) {

                HitInfo hit_info = get_object_hit_info(rayQuery);
                accumulated_ray_color *= hit_info.color;
                // Flip the normal so it points against the ray direction:
                hit_info.world_normal = faceforward(hit_info.world_normal, ray_direction, hit_info.world_normal);
                ray_origin = hit_info.world_position;

                // For a random diffuse bounce direction, we follow the approach of
                // Ray Tracing in One Weekend, and generate a random point on a sphere
                // of radius 1 centered at the normal. This uses the random_unit_vector
                // function from chapter 8.5:
                const float theta = 6.2831853 * stepAndOutputRNGFloat(rng_state); // Random in [0, 2pi]
                const float u = 2.0 * stepAndOutputRNGFloat(rng_state) - 1.0; // Random in [-1, 1]
                const float r = sqrt(1.0 - u * u);
                ray_direction = hit_info.world_normal + vec3(r * cos(theta), r * sin(theta), u); // i think this is incorrect
                // Then normalize the ray direction:
                ray_direction = normalize(ray_direction);

                // pixel_color = vec3(0, reflect(ray_direction, hit_info.world_normal).y, 0);
                // pixel_color = vec3(0, ray_direction.y, 0);
                // if (pixel == vec2(300, 150)) {
                //     pixel_color = vec3(1, 0, 0);
                //     debugPrintfEXT("ray dir %v3f\n", ray_direction);
                //     debugPrintfEXT("reflect ray dir %v3f\n", reflect(ray_direction, hit_info.world_normal));
                //     debugPrintfEXT("normal %v3f\n", hit_info.world_normal);
                //     debugPrintfEXT("position %v3f\n", hit_info.world_position);
                // }
                // break;

            } else {
                // Ray hit the sky
                accumulated_ray_color *= skyColor(ray_direction);
                summed_pixel_color += accumulated_ray_color;
                break;
            }
        }
    }

    pixel_color = summed_pixel_color / SAMPLE_COUNT;
    pixel_color = ACESToneMapping(pixel_color, 2);

    imageStore(storage_image, ivec2(pixel), vec4(pixel_color, 1.0));

    // debugPrintfEXT("Color %v3f\n", pixelColor);
}
