#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_debug_printf : require
#extension GL_GOOGLE_include_directive : require

#include "common.glsl"

layout(binding = 0, set = 0, rgba32f) uniform image2D storage_image;
layout(binding = 4, set = 0, rgba32f) uniform image2D tone_mapped_image;
layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;

// layout(binding = 2, set = 0) uniform Camera
// {
//     vec3 origin;
//     vec3 dir;
// }
// camera;

struct PushConstants {
    uint render_width;
    uint render_height;
    uint sample_count;
    uint batch_sample_count;
};

layout(push_constant) uniform PushConsts
{
    PushConstants push_constants;
};

layout(location = 0) rayPayloadEXT PassableInfo payload;

vec3 ACESToneMapping(vec3 color, float adapted_lum)
{
    const float A = 2.51f;
    const float B = 0.03f;
    const float C = 2.43f;
    const float D = 0.59f;
    const float E = 0.14f;

    color *= adapted_lum;
    return (color * (A * color + B)) / (color * (C * color + D) + E);
}

float max3(vec3 v)
{
    return max(max(v.x, v.y), v.z);
}

void main()
{
    // debugPrintfEXT("asdf");

    const uvec2 resolution = imageSize(storage_image);
    const uvec2 pixel = uvec2(gl_LaunchIDEXT.xy);

    if ((pixel.x >= resolution.x) || (pixel.y >= resolution.y)) {
        return;
    }

    // This scene uses a right-handed coordinate system like the OBJ file format, where the
    // +x axis points right, the +y axis points up, and the -z axis points into the screen.
    // The camera is located at (-0.001, 0, 53).
    const vec3 camera_origin = vec3(-0.001, 0, 53);
    // Define the field of view by the vertical slope of the topmost rays:
    const float fovVerticalSlope = 1.0 / 5.0;

    payload.rngState = (push_constants.sample_count * resolution.y + pixel.y) * resolution.x + pixel.x; // Initial seed

    const uint SAMPLE_COUNT = push_constants.batch_sample_count;

    vec3 summed_pixel_color = vec3(0);
    vec3 pixel_color = vec3(0.0);

    for (uint sample_id = 0; sample_id < SAMPLE_COUNT; sample_id++) {

        vec2 random_pixel = pixel + vec2(stepAndOutputRNGFloat(payload.rngState), stepAndOutputRNGFloat(payload.rngState));
        const vec2 screenUV = vec2(2.0 * (float(random_pixel.x) + 0.5 - 0.5 * resolution.x) / resolution.y, //
            -(2.0 * (float(random_pixel.y) + 0.5 - 0.5 * resolution.y) / resolution.y) // Flip the y axis
        );
        vec3 accumulated_ray_color = vec3(1.0);
        vec3 ray_origin = camera_origin;
        vec3 ray_direction = normalize(vec3(fovVerticalSlope * screenUV.x, fovVerticalSlope * screenUV.y, -1.0));

        float tmin = 0.001;
        float tmax = 10000.0;

        vec3 accumulatedRayColor = vec3(1.0);
        vec3 rayOrigin = camera_origin;
        for (int traced_segment = 0; traced_segment < 32; traced_segment++) {
            traceRayEXT(tlas, gl_RayFlagsOpaqueEXT, 0xFF, 0, 0, 0, rayOrigin, tmin, ray_direction, tmax, 0);
            accumulatedRayColor *= payload.color;

            if (payload.rayHitSky) {
                // Ray hit the sky
                accumulated_ray_color *= payload.color;
                summed_pixel_color += accumulated_ray_color;
                break;
            } else {
                accumulated_ray_color *= payload.color;
                rayOrigin = payload.rayOrigin;
                ray_direction = payload.rayDirection;
            }
        }
    }

    if (push_constants.sample_count != 0) {
        vec4 old_pixel = imageLoad(storage_image, ivec2(pixel));
        pixel_color = (old_pixel.rgb * push_constants.sample_count + summed_pixel_color) / (push_constants.sample_count + SAMPLE_COUNT);
    } else {
        pixel_color = summed_pixel_color / SAMPLE_COUNT;
    }

    vec3 tone_mapped_color = ACESToneMapping(pixel_color, 1.5);

    imageStore(storage_image, ivec2(pixel), vec4(pixel_color, 1.0));
    imageStore(tone_mapped_image, ivec2(pixel), vec4(tone_mapped_color, 1.0));
}
