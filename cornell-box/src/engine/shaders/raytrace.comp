#version 460
#extension GL_EXT_debug_printf : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_ray_query : require

layout(local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, set = 0, scalar) buffer storage_buffer
{
    vec3 image_data[];
};

layout(binding = 1, set = 0) uniform accelerationStructureEXT tlas;

const uvec2 RESOLUTION = uvec2(800, 600);

const vec3 camera_origin = vec3(-0.001, 1.0, 6.0);
vec3 ray_origin = camera_origin;

void main()
{
    const uvec2 pixel = gl_GlobalInvocationID.xy;
    if ((pixel.x > RESOLUTION.x) || (pixel.y > RESOLUTION.y)) {
        return;
    }

    const vec2 screenUV = vec2(2.0 * (float(pixel.x) + 0.5 - 0.5 * RESOLUTION.x) / RESOLUTION.y, //
        -(2.0 * (float(pixel.y) + 0.5 - 0.5 * RESOLUTION.y) / RESOLUTION.y) // Flip the y axis
    );

    const float fovVerticalSlope = 1.0 / 5.0;
    vec3 rayDirection = vec3(fovVerticalSlope * screenUV.x, fovVerticalSlope * screenUV.y, -1.0);

    rayQueryEXT rayQuery;

    rayQueryInitializeEXT(rayQuery, // Ray query
        tlas, // Top-level acceleration structure
        gl_RayFlagsOpaqueEXT, // Ray flags, here saying "treat all geometry as opaque"
        0xFF, // 8-bit instance mask, here saying "trace against all instances"
        ray_origin, // Ray origin
        0.1, // Minimum t-value
        rayDirection, // Ray direction
        10000.0); // Maximum t-value

    rayQueryProceedEXT(rayQuery);

    // const float t = rayQueryGetIntersectionTEXT(rayQuery, true);

    const vec3 pixel_color = vec3(float(pixel.x) / RESOLUTION.x, // Red
        float(pixel.y) / RESOLUTION.y, // Green
        0.0);

    // Get the index of this invocation in the buffer:
    uint linearIndex = RESOLUTION.x * pixel.y + pixel.x;
    // Write the color to the buffer.
    image_data[linearIndex] = pixel_color;

    debugPrintfEXT("Color %v3f\n", pixel_color);
}